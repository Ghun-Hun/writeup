"magnet_dumbbell_z", "roll_forearm", "pitch_forearm", "yaw_forearm", "total_accel_forearm",
"gyros_forearm_x", "gyros_forearm_y", "gyros_forearm_z", "accel_forearm_x",
"accel_forearm_y", "accel_forearm_z", "magnet_forearm_x", "magnet_forearm_y",
"magnet_forearm_z")
pml.test<- pml.test[, include.cols]
include.cols <- c(include.cols, "classe")
pml.training <- pml.training[, include.cols]
library(randomForest)
set.seed(50351)
#trainPar <- trainControl(allowParallel = TRUE, method = "cv", number = 5)
#modelFit <- train(classe ~ ., data = pml.training, method="rf",trainControl = trainPar, importance=TRUE)
#test <- predict(modelFit, pml.training)
modelFit <- train(classe ~ ., data = pml.training, method="gbm",verbose=TRUE)
modelFit
modelFit
library(randomForest)
set.seed(50351)
#trainPar <- trainControl(allowParallel = TRUE, method = "cv", number = 5)
#modelFit <- train(classe ~ ., data = pml.training, method="rf",trainControl = trainPar, importance=TRUE)
#test <- predict(modelFit, pml.training)
modelFit <- train(classe ~ ., data = pml.training, method="gbm",verbose=TRUE)
library(caret)
library(rpart)
library(dplyr)
library(lubridate)
#download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv","pml-training.csv",method = "curl")
#download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv","pml-testing.csv",method = "curl")
pml.training<-read.csv("pml-training.csv",header=TRUE,na.strings = c("NA", "", "#DIV/0!"))
pml.test<-read.csv("pml-testing.csv",header=TRUE,na.strings = c("NA", "", "#DIV/0!"))
str(pml.training)
data.preprocess<-function(data){
data<-data[-c(1:7)]
detect.na<-function(data){
if(sum(is.na(data))/length(data)>0.9)
{ tt<-TRUE
}
else
{ tt<-FALSE
}
invisible(tt)
}
NA.col<-sapply(data,detect.na)
data<-data[,!NA.col]
class<-length(data)
data.zero <-nearZeroVar(data[,-class],saveMetrics = TRUE)
data<-data[,!as.logical(data.zero$nzv)]
if(any(is.na(data))){
#data.impute<-preProcess(data[,-class],method=c("center", "scale","knnImpute", "pca"), thresh=0.9)
data.impute<-preProcess(subsetTraining[,-class],method="bagImpute")
data[,-class]<-predict(data.impute,data[,-class])
}
data
}
pml.test$classe<-1:nrow(pml.test)
pml.test<-data.preprocess(pml.test)
pml.training<-data.preprocess(pml.training)
pred.corr <- cor(pml.training[,-53])
pal <- colorRampPalette(c("blue", "white", "red"))(n = 199)
heatmap(pred.corr, col = pal)
pred.corr[(pred.corr < -0.8 | pred.corr > 0.8) & pred.corr != 1]
pml.training <- pml.training[, -findCorrelation(pred.corr)]
library(caret)
library(rpart)
library(dplyr)
library(lubridate)
#download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv","pml-training.csv",method = "curl")
#download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv","pml-testing.csv",method = "curl")
pml.training<-read.csv("pml-training.csv",header=TRUE,na.strings = c("NA", "", "#DIV/0!"))
pml.test<-read.csv("pml-testing.csv",header=TRUE,na.strings = c("NA", "", "#DIV/0!"))
str(pml.training)
data.preprocess<-function(data){
data<-data[-c(1:7)]
detect.na<-function(data){
if(sum(is.na(data))/length(data)>0.9)
{ tt<-TRUE
}
else
{ tt<-FALSE
}
invisible(tt)
}
NA.col<-sapply(data,detect.na)
data<-data[,!NA.col]
class<-length(data)
data.zero <-nearZeroVar(data[,-class],saveMetrics = TRUE)
data<-data[,!as.logical(data.zero$nzv)]
if(any(is.na(data))){
#data.impute<-preProcess(data[,-class],method=c("center", "scale","knnImpute", "pca"), thresh=0.9)
data.impute<-preProcess(subsetTraining[,-class],method="bagImpute")
data[,-class]<-predict(data.impute,data[,-class])
}
data
}
pml.test$classe<-1:nrow(pml.test)
pml.test<-data.preprocess(pml.test)
pml.training<-data.preprocess(pml.training)
pred.corr <- cor(pml.training[,-53])
pal <- colorRampPalette(c("blue", "white", "red"))(n = 199)
heatmap(pred.corr, col = pal)
pred.corr[(pred.corr < -0.8 | pred.corr > 0.8) & pred.corr != 1]
pml.training <- pml.training[, -findCorrelation(pred.corr)]
comboInfo <- findLinearCombos(pml.training)
if(!is.null(comboInfo)){
pml.training <- pml.training[, -comboInfo$remove]
}
library(caret)
library(rpart)
library(dplyr)
library(lubridate)
#download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv","pml-training.csv",method = "curl")
#download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv","pml-testing.csv",method = "curl")
pml.training<-read.csv("pml-training.csv",header=TRUE,na.strings = c("NA", "", "#DIV/0!"))
pml.test<-read.csv("pml-testing.csv",header=TRUE,na.strings = c("NA", "", "#DIV/0!"))
str(pml.training)
data.preprocess<-function(data){
data<-data[-c(1:7)]
detect.na<-function(data){
if(sum(is.na(data))/length(data)>0.9)
{ tt<-TRUE
}
else
{ tt<-FALSE
}
invisible(tt)
}
NA.col<-sapply(data,detect.na)
data<-data[,!NA.col]
class<-length(data)
data.zero <-nearZeroVar(data[,-class],saveMetrics = TRUE)
data<-data[,!as.logical(data.zero$nzv)]
if(any(is.na(data))){
#data.impute<-preProcess(data[,-class],method=c("center", "scale","knnImpute", "pca"), thresh=0.9)
data.impute<-preProcess(subsetTraining[,-class],method="bagImpute")
data[,-class]<-predict(data.impute,data[,-class])
}
data
}
pml.test$classe<-1:nrow(pml.test)
pml.test<-data.preprocess(pml.test)
pml.training<-data.preprocess(pml.training)
pred.corr <- cor(pml.training[,-53])
pal <- colorRampPalette(c("blue", "white", "red"))(n = 199)
heatmap(pred.corr, col = pal)
pred.corr[(pred.corr < -0.8 | pred.corr > 0.8) & pred.corr != 1]
pml.training <- pml.training[, -findCorrelation(pred.corr)]
#comboInfo <- findLinearCombos(pml.training)
#if(!is.null(comboInfo)){
#pml.training <- pml.training[, -comboInfo$remove]
#}
library(randomForest)
set.seed(50351)
#trainPar <- trainControl(allowParallel = TRUE, method = "cv", number = 5)
#modelFit <- train(classe ~ ., data = pml.training, method="rf",trainControl = trainPar, importance=TRUE)
#test <- predict(modelFit, pml.training)
modelFit <- train(classe ~ ., data = pml.training, method="gbm",verbose=TRUE)
library(caret)
library(rpart)
library(dplyr)
library(lubridate)
#download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv","pml-training.csv",method = "curl")
#download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv","pml-testing.csv",method = "curl")
pml.training<-read.csv("pml-training.csv",header=TRUE,na.strings = c("NA", "", "#DIV/0!"))
pml.test<-read.csv("pml-testing.csv",header=TRUE,na.strings = c("NA", "", "#DIV/0!"))
str(pml.training)
data.preprocess<-function(data){
data<-data[-c(1:7)]
detect.na<-function(data){
if(sum(is.na(data))/length(data)>0.9)
{ tt<-TRUE
}
else
{ tt<-FALSE
}
invisible(tt)
}
NA.col<-sapply(data,detect.na)
data<-data[,!NA.col]
class<-length(data)
#
pred.corr <- cor(pml.training[,-class])
pml.training <- pml.training[, -findCorrelation(pred.corr)]
data.zero <-nearZeroVar(data[,-class],saveMetrics = TRUE)
data<-data[,!as.logical(data.zero$nzv)]
if(any(is.na(data))){
#data.impute<-preProcess(data[,-class],method=c("center", "scale","knnImpute", "pca"), thresh=0.9)
data.impute<-preProcess(subsetTraining[,-class],method="bagImpute")
data[,-class]<-predict(data.impute,data[,-class])
}
data
}
pml.test$classe<-1:nrow(pml.test)
pml.test<-data.preprocess(pml.test)
pml.training<-data.preprocess(pml.training)
#pred.corr <- cor(pml.training[,-53])
#pal <- colorRampPalette(c("blue", "white", "red"))(n = 199)
#heatmap(pred.corr, col = pal)
#pred.corr[(pred.corr < -0.8 | pred.corr > 0.8) & pred.corr != 1]
#pml.training <- pml.training[, -findCorrelation(pred.corr)]
#comboInfo <- findLinearCombos(pml.training)
#if(!is.null(comboInfo)){
#pml.training <- pml.training[, -comboInfo$remove]
#}
library(caret)
library(rpart)
library(dplyr)
library(lubridate)
#download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv","pml-training.csv",method = "curl")
#download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv","pml-testing.csv",method = "curl")
pml.training<-read.csv("pml-training.csv",header=TRUE,na.strings = c("NA", "", "#DIV/0!"))
pml.test<-read.csv("pml-testing.csv",header=TRUE,na.strings = c("NA", "", "#DIV/0!"))
str(pml.training)
data.preprocess<-function(data){
data<-data[-c(1:7)]
detect.na<-function(data){
if(sum(is.na(data))/length(data)>0.9)
{ tt<-TRUE
}
else
{ tt<-FALSE
}
invisible(tt)
}
NA.col<-sapply(data,detect.na)
data<-data[,!NA.col]
class<-length(data)
#
pred.corr <- cor(data[,-class])
data <- data[, -findCorrelation(pred.corr)]
data.zero <-nearZeroVar(data[,-class],saveMetrics = TRUE)
data<-data[,!as.logical(data.zero$nzv)]
if(any(is.na(data))){
#data.impute<-preProcess(data[,-class],method=c("center", "scale","knnImpute", "pca"), thresh=0.9)
data.impute<-preProcess(subsetTraining[,-class],method="bagImpute")
data[,-class]<-predict(data.impute,data[,-class])
}
data
}
pml.test$classe<-1:nrow(pml.test)
pml.test<-data.preprocess(pml.test)
pml.training<-data.preprocess(pml.training)
#pred.corr <- cor(pml.training[,-53])
#pal <- colorRampPalette(c("blue", "white", "red"))(n = 199)
#heatmap(pred.corr, col = pal)
#pred.corr[(pred.corr < -0.8 | pred.corr > 0.8) & pred.corr != 1]
#pml.training <- pml.training[, -findCorrelation(pred.corr)]
#comboInfo <- findLinearCombos(pml.training)
#if(!is.null(comboInfo)){
#pml.training <- pml.training[, -comboInfo$remove]
#}
library(randomForest)
set.seed(50351)
trainPar <- trainControl(allowParallel = TRUE, method = "cv", number = 5)
modelFit <- train(classe ~ ., data = pml.training, method="rf",trainControl =trainPar, importance=TRUE,verbose=TRUE)
library(caret)
library(rpart)
library(dplyr)
library(lubridate)
#download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv","pml-training.csv",method = "curl")
#download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv","pml-testing.csv",method = "curl")
pml.training<-read.csv("pml-training.csv",header=TRUE,na.strings = c("NA", "", "#DIV/0!"))
pml.test<-read.csv("pml-testing.csv",header=TRUE,na.strings = c("NA", "", "#DIV/0!"))
str(pml.training)
data.preprocess<-function(data){
data<-data[-c(1:7)]
detect.na<-function(data){
if(sum(is.na(data))/length(data)>0.9)
{ tt<-TRUE
}
else
{ tt<-FALSE
}
invisible(tt)
}
NA.col<-sapply(data,detect.na)
data<-data[,!NA.col]
class<-length(data)
#
pred.corr <- cor(data[,-class])
data <- data[, -findCorrelation(pred.corr)]
comboInfo <- findLinearCombos(data)
if(!is.null(comboInfo)){
data <- data[, -comboInfo$remove]
}
data.zero <-nearZeroVar(data[,-class],saveMetrics = TRUE)
data<-data[,!as.logical(data.zero$nzv)]
if(any(is.na(data))){
#data.impute<-preProcess(data[,-class],method=c("center", "scale","knnImpute", "pca"), thresh=0.9)
data.impute<-preProcess(subsetTraining[,-class],method="bagImpute")
data[,-class]<-predict(data.impute,data[,-class])
}
data
}
pml.test$classe<-1:nrow(pml.test)
pml.test<-data.preprocess(pml.test)
pml.training<-data.preprocess(pml.training)
#pred.corr <- cor(pml.training[,-53])
#pal <- colorRampPalette(c("blue", "white", "red"))(n = 199)
#heatmap(pred.corr, col = pal)
#pred.corr[(pred.corr < -0.8 | pred.corr > 0.8) & pred.corr != 1]
#pml.training <- pml.training[, -findCorrelation(pred.corr)]
#comboInfo <- findLinearCombos(pml.training)
#if(!is.null(comboInfo)){
#pml.training <- pml.training[, -comboInfo$remove]
#}
library(caret)
library(rpart)
library(dplyr)
library(lubridate)
#download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv","pml-training.csv",method = "curl")
#download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv","pml-testing.csv",method = "curl")
pml.training<-read.csv("pml-training.csv",header=TRUE,na.strings = c("NA", "", "#DIV/0!"))
pml.test<-read.csv("pml-testing.csv",header=TRUE,na.strings = c("NA", "", "#DIV/0!"))
str(pml.training)
data.preprocess<-function(data){
data<-data[-c(1:7)]
detect.na<-function(data){
if(sum(is.na(data))/length(data)>0.9)
{ tt<-TRUE
}
else
{ tt<-FALSE
}
invisible(tt)
}
NA.col<-sapply(data,detect.na)
data<-data[,!NA.col]
class<-length(data)
#
pred.corr <- cor(data[,-class])
data <- data[, -findCorrelation(pred.corr)]
data.zero <-nearZeroVar(data[,-class],saveMetrics = TRUE)
data<-data[,!as.logical(data.zero$nzv)]
if(any(is.na(data))){
#data.impute<-preProcess(data[,-class],method=c("center", "scale","knnImpute", "pca"), thresh=0.9)
data.impute<-preProcess(subsetTraining[,-class],method="bagImpute")
data[,-class]<-predict(data.impute,data[,-class])
}
data
}
pml.test$classe<-1:nrow(pml.test)
pml.test<-data.preprocess(pml.test)
pml.training<-data.preprocess(pml.training)
#pred.corr <- cor(pml.training[,-53])
#pal <- colorRampPalette(c("blue", "white", "red"))(n = 199)
#heatmap(pred.corr, col = pal)
#pred.corr[(pred.corr < -0.8 | pred.corr > 0.8) & pred.corr != 1]
#pml.training <- pml.training[, -findCorrelation(pred.corr)]
#comboInfo <- findLinearCombos(pml.training)
#if(!is.null(comboInfo)){
#pml.training <- pml.training[, -comboInfo$remove]
#}
library(randomForest)
set.seed(50351)
#trainPar <- trainControl(allowParallel = TRUE, method = "cv", number = 5)
#modelFit <- train(classe ~ ., data = pml.training, method="rf",trainControl =trainPar, importance=TRUE,verbose=TRUE)
#test <- predict(modelFit, pml.training)
modelFit <- train(classe ~ ., data = pml.training, method="rpart",verbose=TRUE)
library(randomForest)
set.seed(50351)
#trainPar <- trainControl(allowParallel = TRUE, method = "cv", number = 5)
#modelFit <- train(classe ~ ., data = pml.training, method="rf",trainControl =trainPar, importance=TRUE,verbose=TRUE)
#test <- predict(modelFit, pml.training)
modelFit <- train(classe ~ ., data = pml.training, method="khh",verbose=TRUE)
library(randomForest)
set.seed(50351)
#trainPar <- trainControl(allowParallel = TRUE, method = "cv", number = 5)
#modelFit <- train(classe ~ ., data = pml.training, method="rf",trainControl =trainPar, importance=TRUE,verbose=TRUE)
#test <- predict(modelFit, pml.training)
modelFit <- train(classe ~ ., data = pml.training, method="cv",verbose=TRUE)
library(randomForest)
set.seed(50351)
trainPar <- trainControl(allowParallel = TRUE, method = "cv", number =10)
modelFit <- train(classe ~ ., data = pml.training, method="rf",trainControl =trainPar, importance=TRUE,verbose=TRUE)
install.packages("doParallel")
library(randomForest)
library(doParallel)
registerDoParallel(makeCluster(detectCores()))
set.seed(50351)
trainPar <- trainControl(allowParallel = TRUE, method = "cv", number =3)
modelFit <- train(classe ~ ., data = pml.training, method="rf",trainControl =trainPar, importance=TRUE,verbose=TRUE)
library(caret)
library(rpart)
library(dplyr)
library(lubridate)
#download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv","pml-training.csv",method = "curl")
#download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv","pml-testing.csv",method = "curl")
pml.training<-read.csv("pml-training.csv",header=TRUE,na.strings = c("NA", "", "#DIV/0!"))
pml.test<-read.csv("pml-testing.csv",header=TRUE,na.strings = c("NA", "", "#DIV/0!"))
str(pml.training)
data.preprocess<-function(data){
data<-data[-c(1:7)]
detect.na<-function(data){
if(sum(is.na(data))/length(data)>0.9)
{ tt<-TRUE
}
else
{ tt<-FALSE
}
invisible(tt)
}
NA.col<-sapply(data,detect.na)
data<-data[,!NA.col]
class<-length(data)
#
pred.corr <- cor(data[,-class])
data <- data[, -findCorrelation(pred.corr)]
data.zero <-nearZeroVar(data[,-class],saveMetrics = TRUE)
data<-data[,!as.logical(data.zero$nzv)]
if(any(is.na(data))){
#data.impute<-preProcess(data[,-class],method=c("center", "scale","knnImpute", "pca"), thresh=0.9)
data.impute<-preProcess(subsetTraining[,-class],method="bagImpute")
data[,-class]<-predict(data.impute,data[,-class])
}
data
}
pml.test$classe<-1:nrow(pml.test)
pml.test<-data.preprocess(pml.test)
pml.training<-data.preprocess(pml.training)
subsets <- seq(2, ncol(pml.training), by=2)
ctl <- rfeControl(functions=rfFuncs, method="cv", verbose=FALSE, returnResamp="final")
pro <- rfe(pml.training, mdrrClass, sizes = subsets, rfeControl=ctl)
plot(pro);
pro$optVariables
newdata4 <- newdata2[, pro$optVariables]
install.packages("mdrr")
install.packages("mdrr")
library(caret)
library(rpart)
library(dplyr)
library(lubridate)
#download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv","pml-training.csv",method = "curl")
#download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv","pml-testing.csv",method = "curl")
pml.training<-read.csv("pml-training.csv",header=TRUE,na.strings = c("NA", "", "#DIV/0!"))
pml.test<-read.csv("pml-testing.csv",header=TRUE,na.strings = c("NA", "", "#DIV/0!"))
str(pml.training)
data.preprocess<-function(data){
data<-data[-c(1:7)]
detect.na<-function(data){
if(sum(is.na(data))/length(data)>0.9)
{ tt<-TRUE
}
else
{ tt<-FALSE
}
invisible(tt)
}
NA.col<-sapply(data,detect.na)
data<-data[,!NA.col]
class<-length(data)
#
pred.corr <- cor(data[,-class])
data <- data[, -findCorrelation(pred.corr)]
data.zero <-nearZeroVar(data[,-class],saveMetrics = TRUE)
data<-data[,!as.logical(data.zero$nzv)]
if(any(is.na(data))){
#data.impute<-preProcess(data[,-class],method=c("center", "scale","knnImpute", "pca"), thresh=0.9)
data.impute<-preProcess(subsetTraining[,-class],method="bagImpute")
data[,-class]<-predict(data.impute,data[,-class])
}
data
}
pml.test$classe<-1:nrow(pml.test)
pml.test<-data.preprocess(pml.test)
pml.training<-data.preprocess(pml.training)
data(mdrr)
subsets <- seq(2, ncol(pml.training), by=2)
ctl <- rfeControl(functions=rfFuncs, method="cv", verbose=FALSE, returnResamp="final")
pro <- rfe(pml.training, mdrrClass, sizes = subsets, rfeControl=ctl)
plot(pro);
pro$optVariables
pml.training <- pml.training[, pro$optVariables]
git init
git add README.md
git commit -m "first commit"
git remote add origin https://github.com/Ghun-Hun/writeup.git
git push -u origin master
library(caret)
library(rpart)
library(dplyr)
library(lubridate)
#download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv","pml-training.csv",method = "curl")
#download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv","pml-testing.csv",method = "curl")
pml.training<-read.csv("pml-training.csv",header=TRUE,na.strings = c("NA", "", "#DIV/0!"))
pml.test<-read.csv("pml-testing.csv",header=TRUE,na.strings = c("NA", "", "#DIV/0!"))
str(pml.training)
data.preprocess<-function(data){
data<-data[-c(1:7)]
detect.na<-function(data){
if(sum(is.na(data))/length(data)>0.9)
{ tt<-TRUE
}
else
{ tt<-FALSE
}
invisible(tt)
}
NA.col<-sapply(data,detect.na)
data<-data[,!NA.col]
class<-length(data)
#
pred.corr <- cor(data[,-class])
data <- data[, -findCorrelation(pred.corr)]
data.zero <-nearZeroVar(data[,-class],saveMetrics = TRUE)
data<-data[,!as.logical(data.zero$nzv)]
if(any(is.na(data))){
#data.impute<-preProcess(data[,-class],method=c("center", "scale","knnImpute", "pca"), thresh=0.9)
data.impute<-preProcess(subsetTraining[,-class],method="bagImpute")
data[,-class]<-predict(data.impute,data[,-class])
}
data
}
pml.training<-data.preprocess(pml.training)
